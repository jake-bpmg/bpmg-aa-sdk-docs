# Bpmg AA SDK

> Typescript SDK for BPMG's Account Abstraction smart wallets and bundler integration.

TBD - aas


TBD - bs


import { Callout } from "vocs/components";

## Getting started

Install the package.

<Callout type="note">
  If the published package is hosted in private registry, you need to set
  registry url when installing. Permission perhaps too.
</Callout>

```sh
# in case it is public
pnpm add bpmg-aa-sdk

# if private, set the registry
pnpm install bpmg-aa-sdk --registry <url-here>

# example
pnpm install bpmg-aa-sdk --registry http://0.0.0.0:4873/
```

Prepare to instantiate the sdk.

```ts
import { bundler, accountAbstraction } from "bpmg-aa-sdk";
import type {
  IBundlerServiceConfig,
  IAccountAbstractionServiceConfig,
} from "bpmg-aa-sdk";
```

Provide and build configs.

```ts
const usePaymaster = true;
const aasConfig: IAccountAbstractionServiceConfig = {
  rpcUrl: DEVNET_ANVIL_ENDPOINT,
  deployerPrivateKey: DEVNET_DEPLOYER_PK,
  entrypoint: CONTRACT_ENTRYPOINT,
  runner: CONTRACT_BPMG_RUNNER,
  paymaster: CONTRACT_PAYMASTER,
  accountFactory: CONTRACT_ACCOUNT_FACTORY,
  erc20: CONTRACT_POINT,
  erc721: CONTRACT_BADGE,
  usePaymaster,
};

const bsConfig: IBundlerServiceConfig = {
  rpcUrl: DEVNET_ANVIL_ENDPOINT,
  bundlerUrl: DEVNET_SKANDHA_ENDPOINT,
  deployerPrivateKey: DEVNET_DEPLOYER_PK,
  entrypoint: CONTRACT_ENTRYPOINT,
  paymaster: CONTRACT_PAYMASTER,
  accountFactory: CONTRACT_ACCOUNT_FACTORY,
  usePaymaster,
};

const aas = new accountAbstraction.AccountAbstractionService(aasConfig);
const bs = new bundler.BundlerService(bsConfig);
```

Start to call the core methods.

```ts
function myFunction() {
  const { saltAsString } = aas.generateSaltAsBytes32();
  // my codes
}
```

<Callout type="warning">
  All related smart contracts must be deployed in prior to calling sdk.

  If chain is devnet, deploy `BpmgEntryPoint` also.

  If not, must use network-wise singleton `EntryPoint V8(0x4337084D9E255Ff0702461CF8895CE9E3b5Ff108)`
</Callout>


## precomputeSmartWallet

Call `BpmgAccountFactory` smart contract method to calculate smart wallet contract address with `create2`.
The address is pre-deploy, which means no on-chain transaction.

### Signature

```ts
async precomputeSmartWallet({ owner, userId }: { owner: AddressLike; userId: string })
```

#### Parameters

* owner: EOA.
* userId: unqiue user id with `uuid`. based on postgres uuid

#### Returns

* a hex string, which is calculated smart account address.
* a string, which is an internally generated unique salt with `nanoid@3`

### Example

```ts
const exampleSetup = {
  userId: "939e9283-a510-461b-b3b0-70cd6fd1c054",
  owner: "0xBf59115DB3b58cd8E6BAD8Ad05ED7bA81ee9735B",
  preSmartAccount: "0xBC76069cd81cB6bDe0AA24E7c7562990F9d820dC",
  salt: "aec352fae1",
};

const { preSmartAccount, saltAsString } = await aas.precomputeSmartWallet({
  owner: exampleValue.owner,
  userId: exampleValue.userId,
});
```


TBD - tbd

